// Code generated by the generate_ast tool; DO NOT EDIT.
package lox

type Expr interface {
	Accept(v visitorExpr) interface{}
	AcceptBool(v visitorExprBool) bool
	AcceptString(v visitorExprString) string
	AcceptInt(v visitorExprInt) int
	AcceptInt8(v visitorExprInt8) int8
	AcceptInt16(v visitorExprInt16) int16
	AcceptInt32(v visitorExprInt32) int32
	AcceptInt64(v visitorExprInt64) int64
	AcceptUint(v visitorExprUint) uint
	AcceptUint8(v visitorExprUint8) uint8
	AcceptUint16(v visitorExprUint16) uint16
	AcceptUint32(v visitorExprUint32) uint32
	AcceptUint64(v visitorExprUint64) uint64
	AcceptUintptr(v visitorExprUintptr) uintptr
	AcceptByte(v visitorExprByte) byte
	AcceptRune(v visitorExprRune) rune
	AcceptFloat32(v visitorExprFloat32) float32
	AcceptFloat64(v visitorExprFloat64) float64
	AcceptComplex64(v visitorExprComplex64) complex64
	AcceptComplex128(v visitorExprComplex128) complex128
}

type visitorExpr interface {
	visitAssignExpr(*AssignExpr) interface{}
	visitBinaryExpr(*BinaryExpr) interface{}
	visitGroupingExpr(*GroupingExpr) interface{}
	visitLiteralExpr(*LiteralExpr) interface{}
	visitLogicalExpr(*LogicalExpr) interface{}
	visitUnaryExpr(*UnaryExpr) interface{}
	visitVariableExpr(*VariableExpr) interface{}
}

type visitorExprBool interface {
	visitAssignExpr(*AssignExpr) bool
	visitBinaryExpr(*BinaryExpr) bool
	visitGroupingExpr(*GroupingExpr) bool
	visitLiteralExpr(*LiteralExpr) bool
	visitLogicalExpr(*LogicalExpr) bool
	visitUnaryExpr(*UnaryExpr) bool
	visitVariableExpr(*VariableExpr) bool
}

type visitorExprString interface {
	visitAssignExpr(*AssignExpr) string
	visitBinaryExpr(*BinaryExpr) string
	visitGroupingExpr(*GroupingExpr) string
	visitLiteralExpr(*LiteralExpr) string
	visitLogicalExpr(*LogicalExpr) string
	visitUnaryExpr(*UnaryExpr) string
	visitVariableExpr(*VariableExpr) string
}

type visitorExprInt interface {
	visitAssignExpr(*AssignExpr) int
	visitBinaryExpr(*BinaryExpr) int
	visitGroupingExpr(*GroupingExpr) int
	visitLiteralExpr(*LiteralExpr) int
	visitLogicalExpr(*LogicalExpr) int
	visitUnaryExpr(*UnaryExpr) int
	visitVariableExpr(*VariableExpr) int
}

type visitorExprInt8 interface {
	visitAssignExpr(*AssignExpr) int8
	visitBinaryExpr(*BinaryExpr) int8
	visitGroupingExpr(*GroupingExpr) int8
	visitLiteralExpr(*LiteralExpr) int8
	visitLogicalExpr(*LogicalExpr) int8
	visitUnaryExpr(*UnaryExpr) int8
	visitVariableExpr(*VariableExpr) int8
}

type visitorExprInt16 interface {
	visitAssignExpr(*AssignExpr) int16
	visitBinaryExpr(*BinaryExpr) int16
	visitGroupingExpr(*GroupingExpr) int16
	visitLiteralExpr(*LiteralExpr) int16
	visitLogicalExpr(*LogicalExpr) int16
	visitUnaryExpr(*UnaryExpr) int16
	visitVariableExpr(*VariableExpr) int16
}

type visitorExprInt32 interface {
	visitAssignExpr(*AssignExpr) int32
	visitBinaryExpr(*BinaryExpr) int32
	visitGroupingExpr(*GroupingExpr) int32
	visitLiteralExpr(*LiteralExpr) int32
	visitLogicalExpr(*LogicalExpr) int32
	visitUnaryExpr(*UnaryExpr) int32
	visitVariableExpr(*VariableExpr) int32
}

type visitorExprInt64 interface {
	visitAssignExpr(*AssignExpr) int64
	visitBinaryExpr(*BinaryExpr) int64
	visitGroupingExpr(*GroupingExpr) int64
	visitLiteralExpr(*LiteralExpr) int64
	visitLogicalExpr(*LogicalExpr) int64
	visitUnaryExpr(*UnaryExpr) int64
	visitVariableExpr(*VariableExpr) int64
}

type visitorExprUint interface {
	visitAssignExpr(*AssignExpr) uint
	visitBinaryExpr(*BinaryExpr) uint
	visitGroupingExpr(*GroupingExpr) uint
	visitLiteralExpr(*LiteralExpr) uint
	visitLogicalExpr(*LogicalExpr) uint
	visitUnaryExpr(*UnaryExpr) uint
	visitVariableExpr(*VariableExpr) uint
}

type visitorExprUint8 interface {
	visitAssignExpr(*AssignExpr) uint8
	visitBinaryExpr(*BinaryExpr) uint8
	visitGroupingExpr(*GroupingExpr) uint8
	visitLiteralExpr(*LiteralExpr) uint8
	visitLogicalExpr(*LogicalExpr) uint8
	visitUnaryExpr(*UnaryExpr) uint8
	visitVariableExpr(*VariableExpr) uint8
}

type visitorExprUint16 interface {
	visitAssignExpr(*AssignExpr) uint16
	visitBinaryExpr(*BinaryExpr) uint16
	visitGroupingExpr(*GroupingExpr) uint16
	visitLiteralExpr(*LiteralExpr) uint16
	visitLogicalExpr(*LogicalExpr) uint16
	visitUnaryExpr(*UnaryExpr) uint16
	visitVariableExpr(*VariableExpr) uint16
}

type visitorExprUint32 interface {
	visitAssignExpr(*AssignExpr) uint32
	visitBinaryExpr(*BinaryExpr) uint32
	visitGroupingExpr(*GroupingExpr) uint32
	visitLiteralExpr(*LiteralExpr) uint32
	visitLogicalExpr(*LogicalExpr) uint32
	visitUnaryExpr(*UnaryExpr) uint32
	visitVariableExpr(*VariableExpr) uint32
}

type visitorExprUint64 interface {
	visitAssignExpr(*AssignExpr) uint64
	visitBinaryExpr(*BinaryExpr) uint64
	visitGroupingExpr(*GroupingExpr) uint64
	visitLiteralExpr(*LiteralExpr) uint64
	visitLogicalExpr(*LogicalExpr) uint64
	visitUnaryExpr(*UnaryExpr) uint64
	visitVariableExpr(*VariableExpr) uint64
}

type visitorExprUintptr interface {
	visitAssignExpr(*AssignExpr) uintptr
	visitBinaryExpr(*BinaryExpr) uintptr
	visitGroupingExpr(*GroupingExpr) uintptr
	visitLiteralExpr(*LiteralExpr) uintptr
	visitLogicalExpr(*LogicalExpr) uintptr
	visitUnaryExpr(*UnaryExpr) uintptr
	visitVariableExpr(*VariableExpr) uintptr
}

type visitorExprByte interface {
	visitAssignExpr(*AssignExpr) byte
	visitBinaryExpr(*BinaryExpr) byte
	visitGroupingExpr(*GroupingExpr) byte
	visitLiteralExpr(*LiteralExpr) byte
	visitLogicalExpr(*LogicalExpr) byte
	visitUnaryExpr(*UnaryExpr) byte
	visitVariableExpr(*VariableExpr) byte
}

type visitorExprRune interface {
	visitAssignExpr(*AssignExpr) rune
	visitBinaryExpr(*BinaryExpr) rune
	visitGroupingExpr(*GroupingExpr) rune
	visitLiteralExpr(*LiteralExpr) rune
	visitLogicalExpr(*LogicalExpr) rune
	visitUnaryExpr(*UnaryExpr) rune
	visitVariableExpr(*VariableExpr) rune
}

type visitorExprFloat32 interface {
	visitAssignExpr(*AssignExpr) float32
	visitBinaryExpr(*BinaryExpr) float32
	visitGroupingExpr(*GroupingExpr) float32
	visitLiteralExpr(*LiteralExpr) float32
	visitLogicalExpr(*LogicalExpr) float32
	visitUnaryExpr(*UnaryExpr) float32
	visitVariableExpr(*VariableExpr) float32
}

type visitorExprFloat64 interface {
	visitAssignExpr(*AssignExpr) float64
	visitBinaryExpr(*BinaryExpr) float64
	visitGroupingExpr(*GroupingExpr) float64
	visitLiteralExpr(*LiteralExpr) float64
	visitLogicalExpr(*LogicalExpr) float64
	visitUnaryExpr(*UnaryExpr) float64
	visitVariableExpr(*VariableExpr) float64
}

type visitorExprComplex64 interface {
	visitAssignExpr(*AssignExpr) complex64
	visitBinaryExpr(*BinaryExpr) complex64
	visitGroupingExpr(*GroupingExpr) complex64
	visitLiteralExpr(*LiteralExpr) complex64
	visitLogicalExpr(*LogicalExpr) complex64
	visitUnaryExpr(*UnaryExpr) complex64
	visitVariableExpr(*VariableExpr) complex64
}

type visitorExprComplex128 interface {
	visitAssignExpr(*AssignExpr) complex128
	visitBinaryExpr(*BinaryExpr) complex128
	visitGroupingExpr(*GroupingExpr) complex128
	visitLiteralExpr(*LiteralExpr) complex128
	visitLogicalExpr(*LogicalExpr) complex128
	visitUnaryExpr(*UnaryExpr) complex128
	visitVariableExpr(*VariableExpr) complex128
}

type AssignExpr struct {
	name  Token
	value Expr
}

// AssignExpr implements Expr
var _ Expr = &AssignExpr{}

func NewAssignExpr(name Token, value Expr) *AssignExpr {
	return &AssignExpr{
		name:  name,
		value: value,
	}
}

func (expr *AssignExpr) Accept(v visitorExpr) interface{} {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptString(v visitorExprString) string {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptInt(v visitorExprInt) int {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitAssignExpr(expr)
}

func (expr *AssignExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitAssignExpr(expr)
}

type BinaryExpr struct {
	left     Expr
	operator Token
	right    Expr
}

// BinaryExpr implements Expr
var _ Expr = &BinaryExpr{}

func NewBinaryExpr(left Expr, operator Token, right Expr) *BinaryExpr {
	return &BinaryExpr{
		left:     left,
		operator: operator,
		right:    right,
	}
}

func (expr *BinaryExpr) Accept(v visitorExpr) interface{} {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptString(v visitorExprString) string {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt(v visitorExprInt) int {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitBinaryExpr(expr)
}

type GroupingExpr struct {
	expression Expr
}

// GroupingExpr implements Expr
var _ Expr = &GroupingExpr{}

func NewGroupingExpr(expression Expr) *GroupingExpr {
	return &GroupingExpr{
		expression: expression,
	}
}

func (expr *GroupingExpr) Accept(v visitorExpr) interface{} {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptString(v visitorExprString) string {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt(v visitorExprInt) int {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitGroupingExpr(expr)
}

type LiteralExpr struct {
	value interface{}
}

// LiteralExpr implements Expr
var _ Expr = &LiteralExpr{}

func NewLiteralExpr(value interface{}) *LiteralExpr {
	return &LiteralExpr{
		value: value,
	}
}

func (expr *LiteralExpr) Accept(v visitorExpr) interface{} {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptString(v visitorExprString) string {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt(v visitorExprInt) int {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitLiteralExpr(expr)
}

type LogicalExpr struct {
	left     Expr
	operator Token
	right    Expr
}

// LogicalExpr implements Expr
var _ Expr = &LogicalExpr{}

func NewLogicalExpr(left Expr, operator Token, right Expr) *LogicalExpr {
	return &LogicalExpr{
		left:     left,
		operator: operator,
		right:    right,
	}
}

func (expr *LogicalExpr) Accept(v visitorExpr) interface{} {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptString(v visitorExprString) string {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptInt(v visitorExprInt) int {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitLogicalExpr(expr)
}

func (expr *LogicalExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitLogicalExpr(expr)
}

type UnaryExpr struct {
	operator Token
	right    Expr
}

// UnaryExpr implements Expr
var _ Expr = &UnaryExpr{}

func NewUnaryExpr(operator Token, right Expr) *UnaryExpr {
	return &UnaryExpr{
		operator: operator,
		right:    right,
	}
}

func (expr *UnaryExpr) Accept(v visitorExpr) interface{} {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptString(v visitorExprString) string {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt(v visitorExprInt) int {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitUnaryExpr(expr)
}

type VariableExpr struct {
	name Token
}

// VariableExpr implements Expr
var _ Expr = &VariableExpr{}

func NewVariableExpr(name Token) *VariableExpr {
	return &VariableExpr{
		name: name,
	}
}

func (expr *VariableExpr) Accept(v visitorExpr) interface{} {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptString(v visitorExprString) string {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptInt(v visitorExprInt) int {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitVariableExpr(expr)
}

func (expr *VariableExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitVariableExpr(expr)
}
