// Code generated by the generate_ast tool; DO NOT EDIT.
package lox

type Expr interface {
	Accept(v visitorExpr) interface{}
	AcceptBool(v visitorExprBool) bool
	AcceptString(v visitorExprString) string
	AcceptInt(v visitorExprInt) int
	AcceptInt8(v visitorExprInt8) int8
	AcceptInt16(v visitorExprInt16) int16
	AcceptInt32(v visitorExprInt32) int32
	AcceptInt64(v visitorExprInt64) int64
	AcceptUint(v visitorExprUint) uint
	AcceptUint8(v visitorExprUint8) uint8
	AcceptUint16(v visitorExprUint16) uint16
	AcceptUint32(v visitorExprUint32) uint32
	AcceptUint64(v visitorExprUint64) uint64
	AcceptUintptr(v visitorExprUintptr) uintptr
	AcceptByte(v visitorExprByte) byte
	AcceptRune(v visitorExprRune) rune
	AcceptFloat32(v visitorExprFloat32) float32
	AcceptFloat64(v visitorExprFloat64) float64
	AcceptComplex64(v visitorExprComplex64) complex64
	AcceptComplex128(v visitorExprComplex128) complex128
}

type visitorExpr interface {
	visitBinaryExpr(*BinaryExpr) interface{}
	visitGroupingExpr(*GroupingExpr) interface{}
	visitLiteralExpr(*LiteralExpr) interface{}
	visitUnaryExpr(*UnaryExpr) interface{}
}

type visitorExprBool interface {
	visitBinaryExpr(*BinaryExpr) bool
	visitGroupingExpr(*GroupingExpr) bool
	visitLiteralExpr(*LiteralExpr) bool
	visitUnaryExpr(*UnaryExpr) bool
}

type visitorExprString interface {
	visitBinaryExpr(*BinaryExpr) string
	visitGroupingExpr(*GroupingExpr) string
	visitLiteralExpr(*LiteralExpr) string
	visitUnaryExpr(*UnaryExpr) string
}

type visitorExprInt interface {
	visitBinaryExpr(*BinaryExpr) int
	visitGroupingExpr(*GroupingExpr) int
	visitLiteralExpr(*LiteralExpr) int
	visitUnaryExpr(*UnaryExpr) int
}

type visitorExprInt8 interface {
	visitBinaryExpr(*BinaryExpr) int8
	visitGroupingExpr(*GroupingExpr) int8
	visitLiteralExpr(*LiteralExpr) int8
	visitUnaryExpr(*UnaryExpr) int8
}

type visitorExprInt16 interface {
	visitBinaryExpr(*BinaryExpr) int16
	visitGroupingExpr(*GroupingExpr) int16
	visitLiteralExpr(*LiteralExpr) int16
	visitUnaryExpr(*UnaryExpr) int16
}

type visitorExprInt32 interface {
	visitBinaryExpr(*BinaryExpr) int32
	visitGroupingExpr(*GroupingExpr) int32
	visitLiteralExpr(*LiteralExpr) int32
	visitUnaryExpr(*UnaryExpr) int32
}

type visitorExprInt64 interface {
	visitBinaryExpr(*BinaryExpr) int64
	visitGroupingExpr(*GroupingExpr) int64
	visitLiteralExpr(*LiteralExpr) int64
	visitUnaryExpr(*UnaryExpr) int64
}

type visitorExprUint interface {
	visitBinaryExpr(*BinaryExpr) uint
	visitGroupingExpr(*GroupingExpr) uint
	visitLiteralExpr(*LiteralExpr) uint
	visitUnaryExpr(*UnaryExpr) uint
}

type visitorExprUint8 interface {
	visitBinaryExpr(*BinaryExpr) uint8
	visitGroupingExpr(*GroupingExpr) uint8
	visitLiteralExpr(*LiteralExpr) uint8
	visitUnaryExpr(*UnaryExpr) uint8
}

type visitorExprUint16 interface {
	visitBinaryExpr(*BinaryExpr) uint16
	visitGroupingExpr(*GroupingExpr) uint16
	visitLiteralExpr(*LiteralExpr) uint16
	visitUnaryExpr(*UnaryExpr) uint16
}

type visitorExprUint32 interface {
	visitBinaryExpr(*BinaryExpr) uint32
	visitGroupingExpr(*GroupingExpr) uint32
	visitLiteralExpr(*LiteralExpr) uint32
	visitUnaryExpr(*UnaryExpr) uint32
}

type visitorExprUint64 interface {
	visitBinaryExpr(*BinaryExpr) uint64
	visitGroupingExpr(*GroupingExpr) uint64
	visitLiteralExpr(*LiteralExpr) uint64
	visitUnaryExpr(*UnaryExpr) uint64
}

type visitorExprUintptr interface {
	visitBinaryExpr(*BinaryExpr) uintptr
	visitGroupingExpr(*GroupingExpr) uintptr
	visitLiteralExpr(*LiteralExpr) uintptr
	visitUnaryExpr(*UnaryExpr) uintptr
}

type visitorExprByte interface {
	visitBinaryExpr(*BinaryExpr) byte
	visitGroupingExpr(*GroupingExpr) byte
	visitLiteralExpr(*LiteralExpr) byte
	visitUnaryExpr(*UnaryExpr) byte
}

type visitorExprRune interface {
	visitBinaryExpr(*BinaryExpr) rune
	visitGroupingExpr(*GroupingExpr) rune
	visitLiteralExpr(*LiteralExpr) rune
	visitUnaryExpr(*UnaryExpr) rune
}

type visitorExprFloat32 interface {
	visitBinaryExpr(*BinaryExpr) float32
	visitGroupingExpr(*GroupingExpr) float32
	visitLiteralExpr(*LiteralExpr) float32
	visitUnaryExpr(*UnaryExpr) float32
}

type visitorExprFloat64 interface {
	visitBinaryExpr(*BinaryExpr) float64
	visitGroupingExpr(*GroupingExpr) float64
	visitLiteralExpr(*LiteralExpr) float64
	visitUnaryExpr(*UnaryExpr) float64
}

type visitorExprComplex64 interface {
	visitBinaryExpr(*BinaryExpr) complex64
	visitGroupingExpr(*GroupingExpr) complex64
	visitLiteralExpr(*LiteralExpr) complex64
	visitUnaryExpr(*UnaryExpr) complex64
}

type visitorExprComplex128 interface {
	visitBinaryExpr(*BinaryExpr) complex128
	visitGroupingExpr(*GroupingExpr) complex128
	visitLiteralExpr(*LiteralExpr) complex128
	visitUnaryExpr(*UnaryExpr) complex128
}

type BinaryExpr struct {
	left     Expr
	operator Token
	right    Expr
}

// BinaryExpr implements Expr
var _ Expr = &BinaryExpr{}

func NewBinaryExpr(left Expr, operator Token, right Expr) *BinaryExpr {
	return &BinaryExpr{
		left:     left,
		operator: operator,
		right:    right,
	}
}

func (expr *BinaryExpr) Accept(v visitorExpr) interface{} {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptString(v visitorExprString) string {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt(v visitorExprInt) int {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitBinaryExpr(expr)
}

func (expr *BinaryExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitBinaryExpr(expr)
}

type GroupingExpr struct {
	expression Expr
}

// GroupingExpr implements Expr
var _ Expr = &GroupingExpr{}

func NewGroupingExpr(expression Expr) *GroupingExpr {
	return &GroupingExpr{
		expression: expression,
	}
}

func (expr *GroupingExpr) Accept(v visitorExpr) interface{} {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptString(v visitorExprString) string {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt(v visitorExprInt) int {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitGroupingExpr(expr)
}

func (expr *GroupingExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitGroupingExpr(expr)
}

type LiteralExpr struct {
	value interface{}
}

// LiteralExpr implements Expr
var _ Expr = &LiteralExpr{}

func NewLiteralExpr(value interface{}) *LiteralExpr {
	return &LiteralExpr{
		value: value,
	}
}

func (expr *LiteralExpr) Accept(v visitorExpr) interface{} {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptString(v visitorExprString) string {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt(v visitorExprInt) int {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitLiteralExpr(expr)
}

func (expr *LiteralExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitLiteralExpr(expr)
}

type UnaryExpr struct {
	operator Token
	right    Expr
}

// UnaryExpr implements Expr
var _ Expr = &UnaryExpr{}

func NewUnaryExpr(operator Token, right Expr) *UnaryExpr {
	return &UnaryExpr{
		operator: operator,
		right:    right,
	}
}

func (expr *UnaryExpr) Accept(v visitorExpr) interface{} {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptBool(v visitorExprBool) bool {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptString(v visitorExprString) string {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt(v visitorExprInt) int {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt8(v visitorExprInt8) int8 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt16(v visitorExprInt16) int16 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt32(v visitorExprInt32) int32 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptInt64(v visitorExprInt64) int64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint(v visitorExprUint) uint {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint8(v visitorExprUint8) uint8 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint16(v visitorExprUint16) uint16 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint32(v visitorExprUint32) uint32 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUint64(v visitorExprUint64) uint64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptUintptr(v visitorExprUintptr) uintptr {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptByte(v visitorExprByte) byte {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptRune(v visitorExprRune) rune {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptFloat32(v visitorExprFloat32) float32 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptFloat64(v visitorExprFloat64) float64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptComplex64(v visitorExprComplex64) complex64 {
	return v.visitUnaryExpr(expr)
}

func (expr *UnaryExpr) AcceptComplex128(v visitorExprComplex128) complex128 {
	return v.visitUnaryExpr(expr)
}
