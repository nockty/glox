// Code generated by the generate_ast tool; DO NOT EDIT.
package lox

type Stmt interface {
	Accept(v visitorStmt) interface{}
	AcceptBool(v visitorStmtBool) bool
	AcceptString(v visitorStmtString) string
	AcceptInt(v visitorStmtInt) int
	AcceptInt8(v visitorStmtInt8) int8
	AcceptInt16(v visitorStmtInt16) int16
	AcceptInt32(v visitorStmtInt32) int32
	AcceptInt64(v visitorStmtInt64) int64
	AcceptUint(v visitorStmtUint) uint
	AcceptUint8(v visitorStmtUint8) uint8
	AcceptUint16(v visitorStmtUint16) uint16
	AcceptUint32(v visitorStmtUint32) uint32
	AcceptUint64(v visitorStmtUint64) uint64
	AcceptUintptr(v visitorStmtUintptr) uintptr
	AcceptByte(v visitorStmtByte) byte
	AcceptRune(v visitorStmtRune) rune
	AcceptFloat32(v visitorStmtFloat32) float32
	AcceptFloat64(v visitorStmtFloat64) float64
	AcceptComplex64(v visitorStmtComplex64) complex64
	AcceptComplex128(v visitorStmtComplex128) complex128
}

type visitorStmt interface {
	visitBlockStmt(*BlockStmt) interface{}
	visitExpressionStmt(*ExpressionStmt) interface{}
	visitPrintStmt(*PrintStmt) interface{}
	visitVarStmt(*VarStmt) interface{}
}

type visitorStmtBool interface {
	visitBlockStmt(*BlockStmt) bool
	visitExpressionStmt(*ExpressionStmt) bool
	visitPrintStmt(*PrintStmt) bool
	visitVarStmt(*VarStmt) bool
}

type visitorStmtString interface {
	visitBlockStmt(*BlockStmt) string
	visitExpressionStmt(*ExpressionStmt) string
	visitPrintStmt(*PrintStmt) string
	visitVarStmt(*VarStmt) string
}

type visitorStmtInt interface {
	visitBlockStmt(*BlockStmt) int
	visitExpressionStmt(*ExpressionStmt) int
	visitPrintStmt(*PrintStmt) int
	visitVarStmt(*VarStmt) int
}

type visitorStmtInt8 interface {
	visitBlockStmt(*BlockStmt) int8
	visitExpressionStmt(*ExpressionStmt) int8
	visitPrintStmt(*PrintStmt) int8
	visitVarStmt(*VarStmt) int8
}

type visitorStmtInt16 interface {
	visitBlockStmt(*BlockStmt) int16
	visitExpressionStmt(*ExpressionStmt) int16
	visitPrintStmt(*PrintStmt) int16
	visitVarStmt(*VarStmt) int16
}

type visitorStmtInt32 interface {
	visitBlockStmt(*BlockStmt) int32
	visitExpressionStmt(*ExpressionStmt) int32
	visitPrintStmt(*PrintStmt) int32
	visitVarStmt(*VarStmt) int32
}

type visitorStmtInt64 interface {
	visitBlockStmt(*BlockStmt) int64
	visitExpressionStmt(*ExpressionStmt) int64
	visitPrintStmt(*PrintStmt) int64
	visitVarStmt(*VarStmt) int64
}

type visitorStmtUint interface {
	visitBlockStmt(*BlockStmt) uint
	visitExpressionStmt(*ExpressionStmt) uint
	visitPrintStmt(*PrintStmt) uint
	visitVarStmt(*VarStmt) uint
}

type visitorStmtUint8 interface {
	visitBlockStmt(*BlockStmt) uint8
	visitExpressionStmt(*ExpressionStmt) uint8
	visitPrintStmt(*PrintStmt) uint8
	visitVarStmt(*VarStmt) uint8
}

type visitorStmtUint16 interface {
	visitBlockStmt(*BlockStmt) uint16
	visitExpressionStmt(*ExpressionStmt) uint16
	visitPrintStmt(*PrintStmt) uint16
	visitVarStmt(*VarStmt) uint16
}

type visitorStmtUint32 interface {
	visitBlockStmt(*BlockStmt) uint32
	visitExpressionStmt(*ExpressionStmt) uint32
	visitPrintStmt(*PrintStmt) uint32
	visitVarStmt(*VarStmt) uint32
}

type visitorStmtUint64 interface {
	visitBlockStmt(*BlockStmt) uint64
	visitExpressionStmt(*ExpressionStmt) uint64
	visitPrintStmt(*PrintStmt) uint64
	visitVarStmt(*VarStmt) uint64
}

type visitorStmtUintptr interface {
	visitBlockStmt(*BlockStmt) uintptr
	visitExpressionStmt(*ExpressionStmt) uintptr
	visitPrintStmt(*PrintStmt) uintptr
	visitVarStmt(*VarStmt) uintptr
}

type visitorStmtByte interface {
	visitBlockStmt(*BlockStmt) byte
	visitExpressionStmt(*ExpressionStmt) byte
	visitPrintStmt(*PrintStmt) byte
	visitVarStmt(*VarStmt) byte
}

type visitorStmtRune interface {
	visitBlockStmt(*BlockStmt) rune
	visitExpressionStmt(*ExpressionStmt) rune
	visitPrintStmt(*PrintStmt) rune
	visitVarStmt(*VarStmt) rune
}

type visitorStmtFloat32 interface {
	visitBlockStmt(*BlockStmt) float32
	visitExpressionStmt(*ExpressionStmt) float32
	visitPrintStmt(*PrintStmt) float32
	visitVarStmt(*VarStmt) float32
}

type visitorStmtFloat64 interface {
	visitBlockStmt(*BlockStmt) float64
	visitExpressionStmt(*ExpressionStmt) float64
	visitPrintStmt(*PrintStmt) float64
	visitVarStmt(*VarStmt) float64
}

type visitorStmtComplex64 interface {
	visitBlockStmt(*BlockStmt) complex64
	visitExpressionStmt(*ExpressionStmt) complex64
	visitPrintStmt(*PrintStmt) complex64
	visitVarStmt(*VarStmt) complex64
}

type visitorStmtComplex128 interface {
	visitBlockStmt(*BlockStmt) complex128
	visitExpressionStmt(*ExpressionStmt) complex128
	visitPrintStmt(*PrintStmt) complex128
	visitVarStmt(*VarStmt) complex128
}

type BlockStmt struct {
	statements []Stmt
}

// BlockStmt implements Stmt
var _ Stmt = &BlockStmt{}

func NewBlockStmt(statements []Stmt) *BlockStmt {
	return &BlockStmt{
		statements: statements,
	}
}

func (expr *BlockStmt) Accept(v visitorStmt) interface{} {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptBool(v visitorStmtBool) bool {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptString(v visitorStmtString) string {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptInt(v visitorStmtInt) int {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptInt8(v visitorStmtInt8) int8 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptInt16(v visitorStmtInt16) int16 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptInt32(v visitorStmtInt32) int32 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptInt64(v visitorStmtInt64) int64 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptUint(v visitorStmtUint) uint {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptUint8(v visitorStmtUint8) uint8 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptUint16(v visitorStmtUint16) uint16 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptUint32(v visitorStmtUint32) uint32 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptUint64(v visitorStmtUint64) uint64 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptUintptr(v visitorStmtUintptr) uintptr {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptByte(v visitorStmtByte) byte {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptRune(v visitorStmtRune) rune {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptFloat32(v visitorStmtFloat32) float32 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptFloat64(v visitorStmtFloat64) float64 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptComplex64(v visitorStmtComplex64) complex64 {
	return v.visitBlockStmt(expr)
}

func (expr *BlockStmt) AcceptComplex128(v visitorStmtComplex128) complex128 {
	return v.visitBlockStmt(expr)
}

type ExpressionStmt struct {
	expression Expr
}

// ExpressionStmt implements Stmt
var _ Stmt = &ExpressionStmt{}

func NewExpressionStmt(expression Expr) *ExpressionStmt {
	return &ExpressionStmt{
		expression: expression,
	}
}

func (expr *ExpressionStmt) Accept(v visitorStmt) interface{} {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptBool(v visitorStmtBool) bool {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptString(v visitorStmtString) string {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt(v visitorStmtInt) int {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt8(v visitorStmtInt8) int8 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt16(v visitorStmtInt16) int16 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt32(v visitorStmtInt32) int32 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt64(v visitorStmtInt64) int64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint(v visitorStmtUint) uint {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint8(v visitorStmtUint8) uint8 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint16(v visitorStmtUint16) uint16 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint32(v visitorStmtUint32) uint32 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint64(v visitorStmtUint64) uint64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUintptr(v visitorStmtUintptr) uintptr {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptByte(v visitorStmtByte) byte {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptRune(v visitorStmtRune) rune {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptFloat32(v visitorStmtFloat32) float32 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptFloat64(v visitorStmtFloat64) float64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptComplex64(v visitorStmtComplex64) complex64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptComplex128(v visitorStmtComplex128) complex128 {
	return v.visitExpressionStmt(expr)
}

type PrintStmt struct {
	expression Expr
}

// PrintStmt implements Stmt
var _ Stmt = &PrintStmt{}

func NewPrintStmt(expression Expr) *PrintStmt {
	return &PrintStmt{
		expression: expression,
	}
}

func (expr *PrintStmt) Accept(v visitorStmt) interface{} {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptBool(v visitorStmtBool) bool {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptString(v visitorStmtString) string {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt(v visitorStmtInt) int {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt8(v visitorStmtInt8) int8 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt16(v visitorStmtInt16) int16 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt32(v visitorStmtInt32) int32 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt64(v visitorStmtInt64) int64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint(v visitorStmtUint) uint {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint8(v visitorStmtUint8) uint8 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint16(v visitorStmtUint16) uint16 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint32(v visitorStmtUint32) uint32 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint64(v visitorStmtUint64) uint64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUintptr(v visitorStmtUintptr) uintptr {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptByte(v visitorStmtByte) byte {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptRune(v visitorStmtRune) rune {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptFloat32(v visitorStmtFloat32) float32 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptFloat64(v visitorStmtFloat64) float64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptComplex64(v visitorStmtComplex64) complex64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptComplex128(v visitorStmtComplex128) complex128 {
	return v.visitPrintStmt(expr)
}

type VarStmt struct {
	name        Token
	initializer Expr
}

// VarStmt implements Stmt
var _ Stmt = &VarStmt{}

func NewVarStmt(name Token, initializer Expr) *VarStmt {
	return &VarStmt{
		name:        name,
		initializer: initializer,
	}
}

func (expr *VarStmt) Accept(v visitorStmt) interface{} {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptBool(v visitorStmtBool) bool {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptString(v visitorStmtString) string {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptInt(v visitorStmtInt) int {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptInt8(v visitorStmtInt8) int8 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptInt16(v visitorStmtInt16) int16 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptInt32(v visitorStmtInt32) int32 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptInt64(v visitorStmtInt64) int64 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptUint(v visitorStmtUint) uint {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptUint8(v visitorStmtUint8) uint8 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptUint16(v visitorStmtUint16) uint16 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptUint32(v visitorStmtUint32) uint32 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptUint64(v visitorStmtUint64) uint64 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptUintptr(v visitorStmtUintptr) uintptr {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptByte(v visitorStmtByte) byte {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptRune(v visitorStmtRune) rune {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptFloat32(v visitorStmtFloat32) float32 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptFloat64(v visitorStmtFloat64) float64 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptComplex64(v visitorStmtComplex64) complex64 {
	return v.visitVarStmt(expr)
}

func (expr *VarStmt) AcceptComplex128(v visitorStmtComplex128) complex128 {
	return v.visitVarStmt(expr)
}
