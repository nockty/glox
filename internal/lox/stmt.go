// Code generated by the generate_ast tool; DO NOT EDIT.
package lox

type Stmt interface {
	Accept(v visitorStmt) interface{}
	AcceptBool(v visitorStmtBool) bool
	AcceptString(v visitorStmtString) string
	AcceptInt(v visitorStmtInt) int
	AcceptInt8(v visitorStmtInt8) int8
	AcceptInt16(v visitorStmtInt16) int16
	AcceptInt32(v visitorStmtInt32) int32
	AcceptInt64(v visitorStmtInt64) int64
	AcceptUint(v visitorStmtUint) uint
	AcceptUint8(v visitorStmtUint8) uint8
	AcceptUint16(v visitorStmtUint16) uint16
	AcceptUint32(v visitorStmtUint32) uint32
	AcceptUint64(v visitorStmtUint64) uint64
	AcceptUintptr(v visitorStmtUintptr) uintptr
	AcceptByte(v visitorStmtByte) byte
	AcceptRune(v visitorStmtRune) rune
	AcceptFloat32(v visitorStmtFloat32) float32
	AcceptFloat64(v visitorStmtFloat64) float64
	AcceptComplex64(v visitorStmtComplex64) complex64
	AcceptComplex128(v visitorStmtComplex128) complex128
}

type visitorStmt interface {
	visitExpressionStmt(*ExpressionStmt) interface{}
	visitPrintStmt(*PrintStmt) interface{}
}

type visitorStmtBool interface {
	visitExpressionStmt(*ExpressionStmt) bool
	visitPrintStmt(*PrintStmt) bool
}

type visitorStmtString interface {
	visitExpressionStmt(*ExpressionStmt) string
	visitPrintStmt(*PrintStmt) string
}

type visitorStmtInt interface {
	visitExpressionStmt(*ExpressionStmt) int
	visitPrintStmt(*PrintStmt) int
}

type visitorStmtInt8 interface {
	visitExpressionStmt(*ExpressionStmt) int8
	visitPrintStmt(*PrintStmt) int8
}

type visitorStmtInt16 interface {
	visitExpressionStmt(*ExpressionStmt) int16
	visitPrintStmt(*PrintStmt) int16
}

type visitorStmtInt32 interface {
	visitExpressionStmt(*ExpressionStmt) int32
	visitPrintStmt(*PrintStmt) int32
}

type visitorStmtInt64 interface {
	visitExpressionStmt(*ExpressionStmt) int64
	visitPrintStmt(*PrintStmt) int64
}

type visitorStmtUint interface {
	visitExpressionStmt(*ExpressionStmt) uint
	visitPrintStmt(*PrintStmt) uint
}

type visitorStmtUint8 interface {
	visitExpressionStmt(*ExpressionStmt) uint8
	visitPrintStmt(*PrintStmt) uint8
}

type visitorStmtUint16 interface {
	visitExpressionStmt(*ExpressionStmt) uint16
	visitPrintStmt(*PrintStmt) uint16
}

type visitorStmtUint32 interface {
	visitExpressionStmt(*ExpressionStmt) uint32
	visitPrintStmt(*PrintStmt) uint32
}

type visitorStmtUint64 interface {
	visitExpressionStmt(*ExpressionStmt) uint64
	visitPrintStmt(*PrintStmt) uint64
}

type visitorStmtUintptr interface {
	visitExpressionStmt(*ExpressionStmt) uintptr
	visitPrintStmt(*PrintStmt) uintptr
}

type visitorStmtByte interface {
	visitExpressionStmt(*ExpressionStmt) byte
	visitPrintStmt(*PrintStmt) byte
}

type visitorStmtRune interface {
	visitExpressionStmt(*ExpressionStmt) rune
	visitPrintStmt(*PrintStmt) rune
}

type visitorStmtFloat32 interface {
	visitExpressionStmt(*ExpressionStmt) float32
	visitPrintStmt(*PrintStmt) float32
}

type visitorStmtFloat64 interface {
	visitExpressionStmt(*ExpressionStmt) float64
	visitPrintStmt(*PrintStmt) float64
}

type visitorStmtComplex64 interface {
	visitExpressionStmt(*ExpressionStmt) complex64
	visitPrintStmt(*PrintStmt) complex64
}

type visitorStmtComplex128 interface {
	visitExpressionStmt(*ExpressionStmt) complex128
	visitPrintStmt(*PrintStmt) complex128
}

type ExpressionStmt struct {
	expression Expr
}

// ExpressionStmt implements Stmt
var _ Stmt = &ExpressionStmt{}

func NewExpressionStmt(expression Expr) *ExpressionStmt {
	return &ExpressionStmt{
		expression: expression,
	}
}

func (expr *ExpressionStmt) Accept(v visitorStmt) interface{} {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptBool(v visitorStmtBool) bool {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptString(v visitorStmtString) string {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt(v visitorStmtInt) int {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt8(v visitorStmtInt8) int8 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt16(v visitorStmtInt16) int16 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt32(v visitorStmtInt32) int32 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptInt64(v visitorStmtInt64) int64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint(v visitorStmtUint) uint {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint8(v visitorStmtUint8) uint8 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint16(v visitorStmtUint16) uint16 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint32(v visitorStmtUint32) uint32 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUint64(v visitorStmtUint64) uint64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptUintptr(v visitorStmtUintptr) uintptr {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptByte(v visitorStmtByte) byte {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptRune(v visitorStmtRune) rune {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptFloat32(v visitorStmtFloat32) float32 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptFloat64(v visitorStmtFloat64) float64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptComplex64(v visitorStmtComplex64) complex64 {
	return v.visitExpressionStmt(expr)
}

func (expr *ExpressionStmt) AcceptComplex128(v visitorStmtComplex128) complex128 {
	return v.visitExpressionStmt(expr)
}

type PrintStmt struct {
	expression Expr
}

// PrintStmt implements Stmt
var _ Stmt = &PrintStmt{}

func NewPrintStmt(expression Expr) *PrintStmt {
	return &PrintStmt{
		expression: expression,
	}
}

func (expr *PrintStmt) Accept(v visitorStmt) interface{} {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptBool(v visitorStmtBool) bool {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptString(v visitorStmtString) string {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt(v visitorStmtInt) int {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt8(v visitorStmtInt8) int8 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt16(v visitorStmtInt16) int16 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt32(v visitorStmtInt32) int32 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptInt64(v visitorStmtInt64) int64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint(v visitorStmtUint) uint {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint8(v visitorStmtUint8) uint8 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint16(v visitorStmtUint16) uint16 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint32(v visitorStmtUint32) uint32 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUint64(v visitorStmtUint64) uint64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptUintptr(v visitorStmtUintptr) uintptr {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptByte(v visitorStmtByte) byte {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptRune(v visitorStmtRune) rune {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptFloat32(v visitorStmtFloat32) float32 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptFloat64(v visitorStmtFloat64) float64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptComplex64(v visitorStmtComplex64) complex64 {
	return v.visitPrintStmt(expr)
}

func (expr *PrintStmt) AcceptComplex128(v visitorStmtComplex128) complex128 {
	return v.visitPrintStmt(expr)
}
