package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path"
	"strings"
)

var goTypes = [...]string{
	"bool",
	"string",
	"int", "int8", "int16", "int32", "int64",
	"uint", "uint8", "uint16", "uint32", "uint64", "uintptr",
	"byte", // alias for uint8
	"rune", // alias for int32
	"float32", "float64",
	"complex64", "complex128",
}

func main() {
	args := os.Args
	if len(args) != 2 {
		println("Usage: generate_ast <output directory>")
		os.Exit(64)
	}
	outDir := args[1]
	types := []string{
		"Binary   : left Expr, operator Token, right Expr",
		"Grouping : expression Expr",
		"Literal  : value interface{}",
		"Unary    : operator Token, right Expr",
	}
	err := defineAST(outDir, "Expr", types)
	if err != nil {
		println(fmt.Errorf("failed to generate AST: %w", err).Error())
	}
}

func writeLines(w *bufio.Writer, lines []string) error {
	for _, line := range lines {
		_, err := fmt.Fprintln(w, line)
		if err != nil {
			return fmt.Errorf("write line: %w", err)
		}
	}
	return w.Flush()
}

func defineAST(outDir, baseName string, types []string) error {
	path := path.Join(outDir, strings.ToLower(baseName)+".go")
	f, err := os.Create(path)
	if err != nil {
		return fmt.Errorf("create %v: %w", path, err)
	}
	defer f.Close()
	buf := bytes.NewBuffer(nil)
	w := bufio.NewWriter(buf)
	lines := []string{
		// This comment should match the regex in https://github.com/golang/go/issues/13560#issuecomment-288457920
		"// Code generated by the generate_ast tool; DO NOT EDIT.",
		"package lox",
		"",
	}
	err = writeLines(w, lines)
	if err != nil {
		return err
	}
	err = defineExpr(w)
	if err != nil {
		return fmt.Errorf("define Expr: %w", err)
	}
	err = defineVisitor(w, baseName, types)
	if err != nil {
		return fmt.Errorf("define visitor: %w", err)
	}
	// types
	for _, exprType := range types {
		components := strings.Split(exprType, ":")
		typeName := strings.TrimSpace(components[0])
		fields := strings.TrimSpace(components[1])
		err := defineType(w, baseName, typeName, fields)
		if err != nil {
			return fmt.Errorf("define type %v: %w", typeName, err)
		}
	}
	// format source code
	source, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("format code: %w", err)
	}
	_, err = f.Write(source)
	if err != nil {
		return fmt.Errorf("write code to file %v: %w", f, err)
	}
	return nil
}

func defineExpr(w *bufio.Writer) error {
	lines := []string{"type Expr interface {", "Accept(v visitor) interface{}"}
	// Accept by go type
	for _, goType := range goTypes {
		lines = append(lines, fmt.Sprintf("Accept%s(v visitor%s) %s",
			strings.Title(goType), strings.Title(goType), goType))
	}
	lines = append(lines, "}", "")
	return writeLines(w, lines)
}

func defineVisitor(w *bufio.Writer, baseName string, types []string) error {
	lines := []string{"type visitor interface {"}
	for _, exprType := range types {
		typeName := strings.TrimSpace(strings.Split(exprType, ":")[0])
		lines = append(lines, fmt.Sprintf(
			"visit%s(*%s) interface{}", typeName+baseName, typeName))
	}
	lines = append(lines, "}", "")
	// visitor by go type
	for _, goType := range goTypes {
		lines = append(lines, fmt.Sprintf("type visitor%s interface {", strings.Title(goType)))
		for _, exprType := range types {
			typeName := strings.TrimSpace(strings.Split(exprType, ":")[0])
			lines = append(lines, fmt.Sprintf(
				"visit%s(*%s) %s", typeName+baseName, typeName, goType))
		}
		lines = append(lines, "}", "")
	}
	return writeLines(w, lines)
}

func defineType(w *bufio.Writer, baseName, typeName, fieldList string) error {
	fieldsUntrimmed := strings.Split(fieldList, ",")
	fields := []string{}
	for _, field := range fieldsUntrimmed {
		fields = append(fields, strings.TrimSpace(field))
	}
	// type
	lines := []string{
		fmt.Sprintf("type %s struct {", typeName),
	}
	for _, field := range fields {
		lines = append(lines, field)
	}
	lines = append(lines, "}", "")
	// implements Expr
	lines = append(lines,
		fmt.Sprintf("// %s implements Expr", typeName),
		fmt.Sprintf("var _ Expr = &%s{}", typeName),
		"",
	)
	// constructor
	lines = append(lines,
		fmt.Sprintf("func New%s(%s) *%s {", typeName, fieldList, typeName),
		fmt.Sprintf("return &%s {", typeName),
	)
	for _, field := range fields {
		name := strings.Split(field, " ")[0]
		lines = append(lines, fmt.Sprintf("%s: %s,", name, name))
	}
	lines = append(lines, "}", "}", "")
	// visitor pattern
	lines = append(lines,
		fmt.Sprintf("func (expr *%s) Accept(v visitor) interface{} {", typeName),
		fmt.Sprintf("return v.visit%s(expr)", typeName+baseName),
		"}",
		"",
	)
	// visitor pattern by go type
	for _, goType := range goTypes {
		lines = append(lines,
			fmt.Sprintf("func (expr *%s) Accept%s(v visitor%s) %s {",
				typeName, strings.Title(goType), strings.Title(goType), goType),
			fmt.Sprintf("return v.visit%s(expr)", typeName+baseName),
			"}",
			"",
		)
	}
	return writeLines(w, lines)
}
